マージ可能ヒープ
MakeHeap(A)
Union(A1，A2)

二項木
二項木 Bk は次のように再帰的に定義される順序木である．
B0 は節点1つだけからなる
Bk は2つの Bk-1 からなるのだが，このとき2つの二項木は，一方の根がもう一方の根の最左の子として連結される．

補題
2^k 個の節点をもつ
k は二項木の高さである
高さ i の節点数は kCi である
節点数 n 個の二項木がもつ節点の最大次数は lg n である

二項ヒープ条件
・二項木の集合 H にある全ての二項木は最小ヒープ条件を満たす
・任意の非負整数 k があって，根の次数が k である二項木は H の中に1つしか存在しない．

p[x] 親の参照
key[x] キー値の参照
child[x] 直接の子の参照
sibling[x] 直接の右隣の兄弟の参照を返す．x が右端のときはNILを返す
degree[x] 節点 x の次数
head[H] 根リストの先頭の根を参照する．2項ヒープが要素を含まないときはNILを返す


Minimum(H)
y = NIL
x = head[H]
min = ∞
while x ≠ NIL
    do if (key[x] < min)
        then min = key[x]
               y = x
         x = sibling[x]
return y

Link(y，smallest)
p[y] = smallest
sibling[y] = child[smallest]
child[smallest] = y
degree[smallest] += 1

Union(H1，H2)
H = MakeHeap()
next = head[H]
while next ≠ NIL
    if (degree[current] ≠ degree[next]) または (sibling[next] ≠ NIL かつ degree[current] = degree[sibling[next]])
        then prev = current
               current = next
        else if (degree[current] <= degree[next])
             then Link(next，current)
                    sibling[current] = sibling[next]
             else if (prev[current] = NIL)
                  then head[H] = next
                         Link(current，next)
                         current = next
         next = sibling[current]
return H


A = (Q，Σ，・・・) をDFAとする
閉路のないDFAを非輪状決定性オートマトン (Acyclic Deterministic Finite Automaton，ADFA) と呼ぶ
q ∈ Q，c ∈ Σ に対し δ(q，c) = δ(q'，c') となる q' ∈ Q，c' ∈ Σ は存在しない (ある状態の一つ前の状態はひとつ)

トライ
T = (Q，Σ，・・・) をADFAとする
prev: 1つ前の状態番号．開始状態のとき 0 を返す
next: next + offset = 1つ次の状態番号
offset[c]: Σ → N，ci ∈ Σ から ni ∈ N (i ∈ {1，2，．．，|Σ|}) を得る．ni は重複しない，つまり cj ∈ (Σ - ci) のとき nj ∈ (N - ni) である

トライ T を表した木 をトライ木と呼ぶ
始点を2つ以上もつ節点を分岐点と呼ぶ

トライ木オブジェクトの多重配列表現
      0
      | a
      1
 c ／ ＼e
  3       5
  | #      | g
  8       7 - 9
             #          
  0 : {a}
  1 : {c，e}
  3 : {}
  5 : {g}
  7 : {}
  2，4，6 は未使用オブジェクト

  key : {ac#，aeg#}
                                                 *  *    
  index:  0   1  (2)  3  (4)  5  (6)  7  8  9
  prev:   0   0  (6)  1  (2)  1  (4)  5  3  7  () は未使用オブジェクト
  next:   0   0  (6)  8  (2)  0  (4)  5  3  7  * は葉である
  
  char:    #   a   b   c   d   e   f   g
  offset:  0   1   2   3   4   5   6  7  

未使用オブジェクトを管理する一方向リストを未使用リストと呼ぶ
その他，拡張
・状態番号と配列のインデックスを対応させる
・葉ノードは next の符号を - (マイナス) にして使う
・分岐点でない節点全ては prev の符号を - (マイナス) にして使う
・未使用オブジェクトは prev，next の符号を - (マイナス) にして使う

接尾辞の除去
登録されたキーがもつ接尾辞 (Suffix) のうち，分岐点に差し掛からないものを除去する．
除去された接尾辞は tail リストで管理する
・葉ノードは除去した接尾辞の開始位置 (tailのインデクス) を next に保持する
      0
      | a
      1
 c ／ ＼e
  3       5

  index:  0  1  2
  tail:     #  g  #
                          *        *    
  index:  0   1  (2)  3  (4)  5  (6)  (7)  (8)  (9)
  prev:   0   0  (9)  1  (2)  1  (4)  (6)  (7)  (8) 
  next:   0   0  (9)  0  (2)  1  (4)  (6)  (7)  (8) 

リストの縮小
実行時，未使用オブジェクトがふくらんでゆくので除去する
これから説明するような状況のときリスト内の再配置を行う
トライ木にある最大のインデックスのものを最大ノードと呼ぶ

自然数全ての集合 N
未使用オブジェクトの集合 E
最大ノードの親 u
u がもつ記号の集合 Σu = {c | c ∈ Σ，prev[next[u] + c] = u を満たす c}
u がもつ最小値の記号 s = min(Σu)
u がもつ子ノードの兄弟数 r

条件
e ∈ E，b + offset(s) = e かつ 0 < b < next[u] を満たす b (u の新たな next 値) をもとに Σu = <c1，c2，．．．，cn> に対し vi = b + offset(ci) を定義する
  すべての vi が次のどちらかを満たす
  ・prev[|prev[vi]|] < 0 (vi は分岐点でないか空) である
  または
  Σ(|prev[vi]|) = {vi の親がもつ記号の集合}
  ・r ≠ 2 かつ |Σ(|prev[vi]|)| < r である (vi の兄弟の数が再配置する要素の数より少ない)

条件を満たすとき，
・vi が未使用オブジェクトでなければもとの要素を配列の末尾に移動する
・最後に next[p] + offset(c) 全てを vi に移動する
条件を満たす e が見つからないときは何もしない
(配列の長さ) - |E| = m として，縮小手続きは O(m) 時間内に可能．

空間使用量はノード数を n としたとき O(n) bytes である
検索は定数時間で終わる．O(s) (s: 文字列の長さ)

トライは次の3つの機能をもつ
lookup: 
入力キーと完全一致するキーの値を返す
common-prefix-search: 
入力キー (Prefix) と前方一致するキー (Common Prefix) と値のペアを得る
例．ウェブ・ページの集まり中のテキスト中に含まれるキーワードをすべて見つける
predictive-search: 
入力キーではじまるキーと値のペアを得る
例．日本語入力システムの予測変換

トライ構造は辞書操作を提供するのだから，プログラミング言語における連想配列を表現できる．
key : value (ノードID)
----------------
pine : 1
pine-apple : 2
pine-juice : 3
----------------
lookup(pine) => {pine，1}
lookup(tomato) => {tomato，-1}
common-prefix-search(pine-juice) => {pine，1}，{pine-juice，3}
predictive-search(pine-) => {pine-apple，2}，{pine-juice，3}
marisa-trei: http://marisa-trie.googlecode.com/svn/trunk/docs/readme.ja.html

従来のハッシュ法との相違点
・キー検索がハッシュテーブルより漸近的に早い
・ハッシュキーの衝突問題から開放される
・トライ木はキーの辞書順をないほうしている
ハッシュと比べてキーをいっぺんに取り出すのが苦手みたい．ノード数の線形時間ですかね

