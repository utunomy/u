0 ⇒ 1   
1 ⇒ 4  
2 ⇒ 4  
3 ⇒ 6  
4 ⇒ 6  
5 ⇒ 6  
6 ⇒ 6  

0 + 1 = 1
1 + 4 = 5
2 + 4 = 6
3 + 6 = 9
4 + 6 = 10
5 + 6 = 11
6 + 6 = 12

bit_vector.set(1)
bit_vector.set(5)
bit_vector.set(6)
bit_vector.set(9)
bit_vector.set(10)
bit_vector.set(11)
bit_vector.set(12)

0100011001111

bit_vector.select(0) - 0 = 1
bit_vector.select(1) - 1 = 4
bit_vector.select(2) - 2 = 4
bit_vector.select(3) - 3 = 6
bit_vector.select(4) - 4 = 6
bit_vector.select(5) - 5 = 6
bit_vector.select(6) - 6 = 6

簡潔ビットベクトル
単調増加列を効率的に扱えるデータ構造
次の2つの操作がある
select(a，i) : 先頭から数えて a が i 回出現した位置
例．10110
select(1，1) = 0
select(1，2) = 2
select(1，3) = 3

rank(a，i) : 0 から i の範囲内に数字 a がいくつあるかを数え上げる
select と rank は逆関数である
例．10110
rank(1，0) = 0
rank(1，1) = 1
rank(1，2) = 1
rank(1，3) = 2
rank(1，4) = 3

転置インデックス
  単語     文書ID
------------------
  apple    1，3
  orange  1，2，4，6
------------------
計算機上の「索引」
検索エンジンの実装などに使われる
ある単語の出現箇所を文書IDで管理
・apple は文書 1，3 に含まれる
・orange は文書 1，2，4，6 に含まれる
文書IDは単調増加する
ということは簡潔ビットベクトルで表現できる

  単語     ビット列
----------------------
  apple    0101
  orange  0110101
----------------------


TRIEからLOUDSを構築する
  親     子
--------------------
  1       2，3，4，5
  2       6，7
  3       8
  4       9，10
--------------------
ノードに対し幅優先探索の順番で番号をつける
  親     子
--------------------
  1       2
  2       6
  3       8
  4       9
--------------------

  親     子の先頭位置 (差分)  次数
------------------------------
  1       2                              4
  2       4                              2
  3       2                              1
  4       1                              2
------------------------------

  親     先頭の子 (unary符号)  次数
--------------------------------
  1       110                           11110
  2       11110                        110
  3       110                           10
  4       10                             110
--------------------------------
子の先頭位置のビット列 : 110 11110 110 10
次数のビット列 : 11110 110 10 110 0 0 0 0 0 0

親ノードから子ノード
・子の先頭位置のビット列
rank(1，select(0，i)) + k = ノード i の k 番目の子ノード番号
例．110 11110 110 10
rank(1，select(0，2)) + 1 = 7
rank(1，select(0，2)) + 2 = 8
・次数のビット列
rank(1，select(0，i - 1))  + (k + 1) = ノード i の k 番目の子ノード番号
例．11110 110 10 110 0 0 0 0 0 0
rank(1，select(0，2 - 1))  + 2 = 6
rank(1，select(0，3 - 1))  + 2 = 8
rank(1，select(0，4 - 1))  + 2 = 9

子ノードから親ノード
・子の先頭位置のビット列
rank(0，select(1，i  + 1)) = ノード i の親ノード番号
例．110 11110 110 10
rank(0，select(1，2 + 1)) = 1
rank(0，select(1，3 + 1)) = 1
rank(0，select(1，4 + 1)) = 1
rank(0，select(1，5 + 1)) = 1
rank(0，select(1，6 + 1)) = 2
・次数のビット列
rank(0，rank(1，i - 2) + 1) + 1 = ノード i の親ノード番号
例．11110 110 10 110 0 0 0 0 0 0
rank(0，rank(1，6 - 2) + 1) + 1 = 2

ウェーブレット行列
まず各データとビット列の対応を考える
0 => 000
1 => 001
2 => 010
3 => 011
4 => 100
5 => 101
6 => 110
7 => 111

データ列：4 7 6 5 3 2 1 0 1 4 1 7
ビット列：1 1 1 1 0 0 0 0 0 1 0 1　(1桁目だけを取り出した)

データ列： 3 2 1 0 1 1 || 4 7 6 5 4 7
ビット列： 1 1 0 0 0 0 || 0 1 1 0 0 1　(2桁目だけ)

データ列： 1 0 1 1 4 5 4 || 3 2 7 6 7
ビット列： 1 0 1 1 0 1 0 || 1 0 1 0 1　(3桁目だけ)

行列：
1 1 1 1 0 0 0 0 0 1 0 1
1 1 0 0 0 0 0 1 1 0 0 1
1 0 1 1 0 1 0 1 0 1 0 1

rank 操作
rank(4，10)　4 => 100

データ列：[4] [7] [6] [5] 3 2 1 0 1 [4] 1 7
ビット列：[1] [1] [1] [1] 0 0 0 0 0 [1] 0 1

データ列： 3 2 1 0 1 1 || [4] [7] [6] [5] [4] 7
ビット列： 1 1 0 0 0 0 || [0] [1] [1] [0] [0] 1

rank1(1，10) = 5
rank1(0，12) = 6
rank2(0，6 + 5) - rank2(0，6) = 3

データ列： 3 2 (1) (0) (1) (1) || [4] 7 6 [5] [4] 7
ビット列： 1 1 (0) (0) (0) (0) || [0] 1 1 [0] [0] 1

データ列： (1) (0) (1) (1) [4] [5] [4] || 3 2 7 6 7
ビット列： (1) (0) (1) (1) [0] [1] [0] || 1 0 1 0 1

rank2(0，6) = 4
rank3(0，3 + 4) - rank3(0，4) = 2
rank(4，10) = 2